#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode {
    int val;
    struct ListNode *next;
} ListNode;

ListNode* createNode(int val) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
    ListNode dummy;
    dummy.next = NULL;
    ListNode* current = &dummy;

    while (list1 != NULL && list2 != NULL) {
        if (list1->val <= list2->val) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }

    if (list1 != NULL) {
        current->next = list1;
    } else {
        current->next = list2;
    }

    return dummy.next;
}

void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        printf("%d -> ", current->val);
        current = current->next;
    }
    printf("NULL\n");
}

void freeList(ListNode* head) {
    ListNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

ListNode* createList(int* arr, int size) {
    if (size == 0) return NULL;
    ListNode* head = createNode(arr[0]);
    ListNode* current = head;
    for (int i = 1; i < size; i++) {
        current->next = createNode(arr[i]);
        current = current->next;
    }
    return head;
}

int main() {
    int arr1[] = {1, 3, 5};
    int arr2[] = {2, 4, 6};
    
    ListNode* list1 = createList(arr1, sizeof(arr1) / sizeof(arr1[0]));
    ListNode* list2 = createList(arr2, sizeof(arr2) / sizeof(arr2[0]));
    
    ListNode* mergedList = mergeTwoLists(list1, list2);
    
    printList(mergedList);
    
    freeList(mergedList);
    
    return 0;
}

#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

TreeNode* createNode(int val) {
    TreeNode* node = (TreeNode*)malloc(sizeof(TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

int findMaxIndex(int* nums, int left, int right) {
    int maxIndex = left;
    for (int i = left + 1; i <= right; i++) {
        if (nums[i] > nums[maxIndex]) {
            maxIndex = i;
        }
    }
    return maxIndex;
}

TreeNode* constructMaximumBinaryTree(int* nums, int left, int right) {
    if (left > right) {
        return NULL;
    }

    int maxIndex = findMaxIndex(nums, left, right);

    TreeNode* root = createNode(nums[maxIndex]);

    root->left = constructMaximumBinaryTree(nums, left, maxIndex - 1);
    root->right = constructMaximumBinaryTree(nums, maxIndex + 1, right);

    return root;
}

void printTree(TreeNode* root) {
    if (root == NULL) return;
    printf("%d ", root->val);
    printTree(root->left);
    printTree(root->right);
}

void freeTree(TreeNode* root) {
    if (root == NULL) return;
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main() {
    int nums[] = {3, 2, 1, 6, 0, 5};
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    TreeNode* root = constructMaximumBinaryTree(nums, 0, numsSize - 1);

    printf("Pre-order traversal of the maximum binary tree: ");
    printTree(root);
    printf("\n");

    freeTree(root);
    return 0;
}
